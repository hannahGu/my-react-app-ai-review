name: AI Code Review

on: [pull_request]

permissions:
  pull-requests: write
  contents: read

jobs:
  lint-and-review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v2
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npx eslint . --format json --output-file eslint-report.json || true

      - name: AI Review Comment
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        with:
          script: |
            let eslintReport;
            try {
              eslintReport = require('./eslint-report.json');
            } catch (error) {
              console.log('No ESLint issues found or report not generated');
              return;
            }
            console.log(JSON.stringify(eslintReport, null, 2));
            const aiSuggestions = eslintReport.length > 0
              ? eslintReport.flatMap(result => 
                  result.messages.map(message => ({
                    file: result.filePath.split('/').slice(-2).join('/') || 'Unknown',
                    line: message.line || 'Unknown',
                    body: `**Copilot Suggestion**: ${message.message || 'No message'}. Rule: \`${message.ruleId || 'unknown rule'}\``
                  }))
                )
              : [];

            if (aiSuggestions.length === 0) {
              console.log('No suggestions generated from ESLint report.');
              return;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## AI Review Report\n' +
                    aiSuggestions.map(s => `📌 **${s.file}**Line ${s.line}**: ${s.body}`).join('\n')
            });

  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate Copilot suggestions
        run: |
          # 这里可以调用 Copilot API 或模拟 Copilot 分析
          echo "## Copilot Code Review" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: Cache `array.length` in loops" >> $GITHUB_STEP_SUMMARY
          echo "- **Readability**: Use optional chaining (`?.`)" >> $GITHUB_STEP_SUMMARY
      - name: Post PR comment
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8')
            })

  insert_comments:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Add Copilot suggestions to code
        run: |
          # 在指定位置插入注释
          sed -i '/function calculate()/a \
          // COPILOT: Use memoization to cache results' app.js
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git commit -am "Added Copilot suggestions"
          git push

